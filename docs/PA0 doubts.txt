PA 0 doubts
-----------
* How is sleep() implemented?

    
    main.o: ./../sys/main.c ../h/conf.h ../h/kernel.h ../h/systypes.h \
  ../h/mem.h ../h/proc.h ../h/stdio.h

unsigned long stime = ctr1000;

UPDATE_SCALL_TIME(currpid, SCALL_, stime);
UPDATE_SCALL_FREQ(currpid, SCALL_);

For pa5, we need to record the frequency of every system calls mentioned in the syscalls.txt for each process. 

But, sleep() is in turn implemented in terms of sleep10(). Thus, I end up increasing both the counters of that of sleep() and sleep10() every time sleep() is called. 

*    -------------
*   |             |
*   |             |
*   |             |
*   |             |   ^
*   |             |   | higher memory
*   |             |   |
*   |             |
*   |             |
*   |             |
*   |             |   |
*   |             |   | stack grows downwards
*   |             |   v
*   |             |


Size of stack of each process in Xinu

By loooking at printprocstks() output, we can see that every process has been allocated a stack worth of 4096 bytes (stack length).
But, the difference between the base and limit pointers comes out to 4092 bytes. This is explitly done when a process is created via create() syscall.

pid
create(blah, blah, requested_stack_size, blah, blah)
{
    blah;
    
    if (requested_stack_size < 4096) 
        requested_stack_size = 4096;
        
    blah;
    
    /* update the process table entry for the new process, say X */
    X->pbase = start_address;
    X->pstklen = 4096;
    /* limit is set to (requested - 4) bytes */
    X->plimit = (X->pbase - requested_stack_size + sizeof (long);
    
    blah;
}

Now, what are those 4 bytes used for? 

|p1 code|p1 data|p1 bss|p1 heap...p1 stack|...|p2 code|p2 data|p2 bss|p2 heap...p2 stack|

I'm trying to understand what will be present on the stack during a function call. 

As far as I have learnt, arguments to the callee (if any), the return address of the caller and the base address would be pushed on the stack before calling another function. 

    08048334 <foo>:
     8048334:	55                   	push   %ebp
     8048335:	89 e5                	mov    %esp,%ebp
     8048337:	c9                   	leave  
     8048338:	c3                   	ret    

    08048339 <main>:
     8048339:	55                   	push   %ebp
     804833a:	89 e5                	mov    %esp,%ebp
     804833c:	83 ec 08             	sub    $0x8,%esp
     804833f:	83 e4 f0             	and    $0xfffffff0,%esp
     8048342:	b8 00 00 00 00       	mov    $0x0,%eax
     8048347:	83 c0 0f             	add    $0xf,%eax
     804834a:	83 c0 0f             	add    $0xf,%eax
     804834d:	c1 e8 04             	shr    $0x4,%eax
     8048350:	c1 e0 04             	shl    $0x4,%eax
     8048353:	29 c4                	sub    %eax,%esp
     8048355:	e8 da ff ff ff       	call   8048334 <foo>
     804835a:	b8 00 00 00 00       	mov    $0x0,%eax
     804835f:	c9                   	leave  
     8048360:	c3                   	ret    
     8048361:	90                   	nop    
     8048362:	90                   	nop    
     8048363:	90                   	nop    

[adhanas@vcln2-2 compile]$ objdump -d printtos.o 

printtos.o:     file format elf32-i386

Disassembly of section .text:

00000000 <printtos>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 14             	sub    $0x14,%esp
   6:	68 00 00 00 00       	push   $0x0
   b:	e8 fc ff ff ff       	call   c <printtos+0xc>
  10:	89 2d 00 00 00 00    	mov    %ebp,0x0
  16:	83 c4 0c             	add    $0xc,%esp
  19:	a1 00 00 00 00       	mov    0x0,%eax
  1e:	ff 70 08             	pushl  0x8(%eax)
  21:	83 c0 08             	add    $0x8,%eax
  24:	50                   	push   %eax
  25:	68 13 00 00 00       	push   $0x13
  2a:	e8 fc ff ff ff       	call   2b <printtos+0x2b>
  2f:	89 25 00 00 00 00    	mov    %esp,0x0
  35:	83 c4 0c             	add    $0xc,%esp
  38:	a1 00 00 00 00       	mov    0x0,%eax
  3d:	ff 30                	pushl  (%eax)
  3f:	50                   	push   %eax
  40:	68 2b 00 00 00       	push   $0x2b
  45:	e8 fc ff ff ff       	call   46 <printtos+0x46>
  4a:	83 c4 0c             	add    $0xc,%esp
  4d:	a1 00 00 00 00       	mov    0x0,%eax
  52:	ff 70 04             	pushl  0x4(%eax)
  55:	83 c0 04             	add    $0x4,%eax
  58:	50                   	push   %eax
  59:	68 42 00 00 00       	push   $0x42
  5e:	e8 fc ff ff ff       	call   5f <printtos+0x5f>
  63:	83 c4 0c             	add    $0xc,%esp
  66:	a1 00 00 00 00       	mov    0x0,%eax
  6b:	ff 70 08             	pushl  0x8(%eax)
  6e:	83 c0 08             	add    $0x8,%eax
  71:	50                   	push   %eax
  72:	68 42 00 00 00       	push   $0x42
  77:	e8 fc ff ff ff       	call   78 <printtos+0x78>
  7c:	83 c4 0c             	add    $0xc,%esp
  7f:	a1 00 00 00 00       	mov    0x0,%eax
  84:	ff 70 0c             	pushl  0xc(%eax)
  87:	83 c0 0c             	add    $0xc,%eax
  8a:	50                   	push   %eax
  8b:	68 42 00 00 00       	push   $0x42
  90:	e8 fc ff ff ff       	call   91 <printtos+0x91>
  95:	83 c4 0c             	add    $0xc,%esp
  98:	a1 00 00 00 00       	mov    0x0,%eax
  9d:	ff 70 10             	pushl  0x10(%eax)
  a0:	83 c0 10             	add    $0x10,%eax
  a3:	50                   	push   %eax
  a4:	68 42 00 00 00       	push   $0x42
  a9:	e8 fc ff ff ff       	call   aa <printtos+0xaa>
  ae:	c7 04 24 5c 00 00 00 	movl   $0x5c,(%esp)
  b5:	e8 fc ff ff ff       	call   b6 <printtos+0xb6>
  ba:	c9                   	leave  
  bb:	c3                   	ret    

[adhanas@vcln2-2 compile]$ objdump -d main.o 

main.o:     file format elf32-i386

Disassembly of section .text:

00000000 <main>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 08             	sub    $0x8,%esp
   6:	83 e4 f0             	and    $0xfffffff0,%esp
   9:	83 ec 10             	sub    $0x10,%esp
   c:	e8 fc ff ff ff       	call   d <main+0xd>
  11:	b8 00 00 00 00       	mov    $0x0,%eax
  16:	c9                   	leave  
  17:	c3                   	ret    


[adhanas@vcln2-2 compile]$ objdump -d main.o 

main.o:     file format elf32-i386

Disassembly of section .text:

00000000 <main>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 08             	sub    $0x8,%esp
   6:	83 e4 f0             	and    $0xfffffff0,%esp
   9:	83 ec 1c             	sub    $0x1c,%esp
   c:	68 00 00 00 00       	push   $0x0
  11:	e8 fc ff ff ff       	call   12 <main+0x12>
  16:	c7 04 24 dd cc bb aa 	movl   $0xaabbccdd,(%esp)
  1d:	e8 fc ff ff ff       	call   1e <main+0x1e>
  22:	c7 04 24 dd ff ff aa 	movl   $0xaaffffdd,(%esp)
  29:	e8 fc ff ff ff       	call   2a <main+0x2a>
  2e:	e8 fc ff ff ff       	call   2f <main+0x2f>
  33:	e8 fc ff ff ff       	call   34 <main+0x34>
  38:	e8 fc ff ff ff       	call   39 <main+0x39>
  3d:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  44:	e8 fc ff ff ff       	call   45 <main+0x45>
  49:	e8 fc ff ff ff       	call   4a <main+0x4a>
  4e:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  55:	e8 fc ff ff ff       	call   56 <main+0x56>
  5a:	e8 fc ff ff ff       	call   5b <main+0x5b>
  5f:	e8 fc ff ff ff       	call   60 <main+0x60>
  64:	e8 fc ff ff ff       	call   65 <main+0x65>
  69:	b8 00 00 00 00       	mov    $0x0,%eax
  6e:	c9                   	leave  
  6f:	c3                   	ret    

y    "chprio",      A
y    "freemem",     A
y    "getpid",      ABCDE
y    "getprio",     A
d    "gettime",
y    "kill",        ABCDE
d    "receive",     B
d    "recvclr",     D
d    "recvtim",
    "resume",       D
d    "scount",      FG
y    "screate",     main
y    "sdelete",     main
y    "send",        AC
d    "setdev",      B
y    "setnok",      ABCDE
d    "signal",      FG
d    "signaln",
y    "sleep",       AB
y    "sleep10",     D
y    "sleep100",    AB
y    "sleep1000",   C
d    "sreset",      FG
y    "stacktrace",  C
y    "suspend",     C
y    "unsleep",     B
    "wait"          FG
    
printtos object code with optimization
--------------------------------------
#
#  Makefile for CSC501 Xinu.
#
 
INCLUDE = -I../h
CFLAGS  = -march=i586 -fno-builtin -c -Wall -O ${DEFS} ${INCLUDE}
SDEFS   = -I../h

[adhanas@bn18-221 compile]$ objdump -d printtos.o 

printtos.o:     file format elf32-i386

Disassembly of section .text:

00000000 <printtos>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 14             	sub    $0x14,%esp
   6:	89 25 00 00 00 00    	mov    %esp,0x0
   c:	89 2d 00 00 00 00    	mov    %ebp,0x0

Task 3 (printtos)
Before[0x00ffefc0]: 0xaaffffdd
After[0x00ffefa4]: 0x00ffefc0
&a[0x00ffefb0], b[0x00ffefb4]
After[0x00ffefa0]: 0x0000abaa
	element[0x00ffefb4]: 0x00000001
	element[0x00ffefb0]: 0x00000001
	element[0x00ffefac]: 0x00000000
	element[0x00ffefa8]: 0x00000000


printtos object code without optimization
-----------------------------------------
#
#  Makefile for CSC501 Xinu.
#
 
INCLUDE = -I../h
CFLAGS  = -march=i586 -fno-builtin -c -Wall -O0 ${DEFS} ${INCLUDE}
SDEFS   = -I../h

[adhanas@bn18-221 compile]$ objdump -d printtos.o 

printtos.o:     file format elf32-i386

Disassembly of section .text:

00000000 <printtos>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 08             	sub    $0x8,%esp
   6:	89 25 00 00 00 00    	mov    %esp,0x0
   c:	89 2d 00 00 00 00    	mov    %ebp,0x0
   

Task 3 (printtos)
Before[0x00ffefd0]: 0x00ffefc4
After[0x00ffefc0]: 0x00000001
&a[0x00ffefc4], b[0x00ffefc0]
After[0x00ffefc0]: 0x00000001
	element[0x00ffefc4]: 0x00000001
	element[0x00ffefc0]: 0x00000001
	element[0x00ffefbc]: 0x00005b16
	element[0x00ffefb8]: 0x00005b16









void
proc_t5_F(int data)
{
    int i = 0;
    int mypid = 0;

    mypid = getpid();
    for (i = 0; i < 5; ++i) {
        wait(sem_G);
        kprintf("proc_F: %d\n", ++sem_data);
        kprintf("proc_F: sem_F count: %d\n", scount(sem_F));
        signal(sem_F);
    }
    sreset(sem_F, 0);
    kprintf("proc_F: sem_F count: %d\n", scount(sem_F));
    setnok(pid_main, mypid);
    kill(mypid);
}


void
proc_t5_G(int data)
{
    int i = 0;
    int mypid = 0;

    mypid = getpid();
    for (i = 0; i < 5; ++i) {
        wait(sem_F);
        kprintf("proc_G: %d\n", sem_data);
        kprintf("proc_G: sem_G count: %d\n", scount(sem_G));
        signal(sem_G);
    }
    sreset(sem_G, 0);
    kprintf("proc_G: sem_G count: %d\n", scount(sem_G));
    setnok(pid_main, mypid);
    kill(mypid);
}

void
proc_t5_H(int data)
{
    int mypid = 0;

    mypid = getpid();
    mypid = getpid();
    setnok(pid_main, mypid);
    kill(mypid);
}

void
create_task5_test_procs(void)
{
    resume((t5_A = create((int *) &proc_t5_A, 256, 10, "proc_t5_A", 1, 10)));
    resume((t5_B = create((int *) &proc_t5_B, 256, 20, "proc_t5_B", 1, 20)));
    resume((t5_C = create((int *) &proc_t5_C, 256, 30, "proc_t5_C", 1, 30)));
    resume((t5_D = create((int *) &proc_t5_D, 256, 40, "proc_t5_D", 1, 40)));
    resume((t5_E = create((int *) &proc_t5_E, 256, 50, "proc_t5_E", 1, 50)));

    sem_F = screate(1);
    sem_G = screate(0);
    resume((t5_F = create((int *) &proc_t5_G, 256, 50, "proc_t5_F",
                                                       2, sem_F, sem_G)));
    resume((t5_G = create((int *) &proc_t5_G, 256, 50, "proc_t5_G",
                                                       2, sem_F, sem_G)));
    resume((t5_H = create((int *) &proc_t5_H, 256, 50, "proc_t5_H", 1, 80)));
}


